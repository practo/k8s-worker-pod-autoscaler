/*
Copyright 2019 Practo Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"fmt"
	"time"

	v1alpha1 "github.com/practo/k8s-worker-pod-autoscaler/pkg/apis/workerpodautoscaler/v1alpha1"
	scheme "github.com/practo/k8s-worker-pod-autoscaler/pkg/generated/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// WorkerPodAutoScalersGetter has a method to return a WorkerPodAutoScalerInterface.
// A group's client should implement this interface.
type WorkerPodAutoScalersGetter interface {
	WorkerPodAutoScalers(namespace string) WorkerPodAutoScalerInterface
}

// WorkerPodAutoScalerInterface has methods to work with WorkerPodAutoScaler resources.
type WorkerPodAutoScalerInterface interface {
	Create(*v1alpha1.WorkerPodAutoScaler) (*v1alpha1.WorkerPodAutoScaler, error)
	Update(*v1alpha1.WorkerPodAutoScaler) (*v1alpha1.WorkerPodAutoScaler, error)
	UpdateStatus(*v1alpha1.WorkerPodAutoScaler) (*v1alpha1.WorkerPodAutoScaler, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.WorkerPodAutoScaler, error)
	List(opts v1.ListOptions) (*v1alpha1.WorkerPodAutoScalerList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.WorkerPodAutoScaler, err error)
	WorkerPodAutoScalerExpansion
}

// workerPodAutoScalers implements WorkerPodAutoScalerInterface
type workerPodAutoScalers struct {
	client rest.Interface
	ns     string
}

// newWorkerPodAutoScalers returns a WorkerPodAutoScalers
func newWorkerPodAutoScalers(c *K8sV1alpha1Client, namespace string) *workerPodAutoScalers {
	return &workerPodAutoScalers{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// validate check if the caller has set the right fields.
func validate(s *v1alpha1.WorkerPodAutoScaler) error {
	if *s.Spec.MaxReplicas < 1 {
		return fmt.Errorf("'max' is a required parameter and must be at least 1")
	}
	if *s.Spec.MinReplicas > *s.Spec.MaxReplicas {
		return fmt.Errorf("'max' must be greater than or equal to 'min'")
	}

	return nil
}

// Get takes name of the workerPodAutoScaler, and returns the corresponding workerPodAutoScaler object, and an error if there is any.
func (c *workerPodAutoScalers) Get(name string, options v1.GetOptions) (result *v1alpha1.WorkerPodAutoScaler, err error) {
	result = &v1alpha1.WorkerPodAutoScaler{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("workerpodautoscalers").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of WorkerPodAutoScalers that match those selectors.
func (c *workerPodAutoScalers) List(opts v1.ListOptions) (result *v1alpha1.WorkerPodAutoScalerList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.WorkerPodAutoScalerList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("workerpodautoscalers").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested workerPodAutoScalers.
func (c *workerPodAutoScalers) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("workerpodautoscalers").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a workerPodAutoScaler and creates it.  Returns the server's representation of the workerPodAutoScaler, and an error, if there is any.
func (c *workerPodAutoScalers) Create(workerPodAutoScaler *v1alpha1.WorkerPodAutoScaler) (result *v1alpha1.WorkerPodAutoScaler, err error) {
	result = &v1alpha1.WorkerPodAutoScaler{}

	err = validate(workerPodAutoScaler)
	if err != nil {
		return result, err
	}

	err = c.client.Post().
		Namespace(c.ns).
		Resource("workerpodautoscalers").
		Body(workerPodAutoScaler).
		Do().
		Into(result)

	return result, err
}

// Update takes the representation of a workerPodAutoScaler and updates it. Returns the server's representation of the workerPodAutoScaler, and an error, if there is any.
func (c *workerPodAutoScalers) Update(workerPodAutoScaler *v1alpha1.WorkerPodAutoScaler) (result *v1alpha1.WorkerPodAutoScaler, err error) {
	result = &v1alpha1.WorkerPodAutoScaler{}

	err = validate(workerPodAutoScaler)
	if err != nil {
		return result, err
	}

	err = c.client.Put().
		Namespace(c.ns).
		Resource("workerpodautoscalers").
		Name(workerPodAutoScaler.Name).
		Body(workerPodAutoScaler).
		Do().
		Into(result)

	return result, err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *workerPodAutoScalers) UpdateStatus(workerPodAutoScaler *v1alpha1.WorkerPodAutoScaler) (result *v1alpha1.WorkerPodAutoScaler, err error) {
	result = &v1alpha1.WorkerPodAutoScaler{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("workerpodautoscalers").
		Name(workerPodAutoScaler.Name).
		SubResource("status").
		Body(workerPodAutoScaler).
		Do().
		Into(result)
	return
}

// Delete takes name of the workerPodAutoScaler and deletes it. Returns an error if one occurs.
func (c *workerPodAutoScalers) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("workerpodautoscalers").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *workerPodAutoScalers) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("workerpodautoscalers").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched workerPodAutoScaler.
func (c *workerPodAutoScalers) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.WorkerPodAutoScaler, err error) {
	result = &v1alpha1.WorkerPodAutoScaler{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("workerpodautoscalers").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
